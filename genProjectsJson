#!/usr/bin/env bash

# genProjectsJson: Generate project-to-attribute mappings in JSON
#
# This script is invoked with each update to the nixexprs repository in
# order to update the top-level projects.json file used by flox to
# identify which expressions are built from which project. Invoke with:
#
# % ./genProjectsJson | jq '.projects'
#
# Failing attributes along with their errors are included in the `failures` key:
#
# % ./genProjectsJson | jq '.failures'

prevErr=$(mktemp)
err=$(mktemp)

prevErrorSet=$(mktemp)
errorSet=$(mktemp)

trap '{ rm "$prevErr" "$err" "$prevErrorSet" "$errorSet"; }' EXIT

echo "{}" > "$errorSet"
prettyFailedAttrPath=

# The prefix the Nix evaluation should use for tracing of failed attribute paths
# such that we can parse the failed path from the error trace
# Note: This needs to be regex-friendly and not be ambiguous with other Nix traces
tracePrefix="genProjectsJson failed while evaluating attribute "

nixEval() {
  nix-instantiate genProjectsJson.nix 2>"$err" \
    --eval --strict --json --show-trace \
    --argstr tracePrefix "$tracePrefix" \
    --argstr errorSetJson "$errorSet"
}

while ! projects=$(nixEval); do

  if [[ -n "$prettyFailedAttrPath" ]] && diff "$prevErr" "$err" >/dev/null; then
    echo "Stderr output for the Nix evaluation didn't change even though the error set was changed to include $prettyFailedAttrPath" >&2
    echo "This is likely a bug in genProjectsJson.nix" >&2
    exit 1
  fi

  # Get the last error trace line of the form we expect and extract the failing attribute path from it
  failedAttrPath=$(sed -n 's/'"$tracePrefix"'\(.*\)/\1/p' "$err" | tail -1)

  if [[ -z "$failedAttrPath" || "$failedAttrPath" == "[]" ]]; then
    echo "Evaluation of genProjectsJson.nix itself failed:" >&2
    cat "$err" >&2
    exit 1
  fi

  prettyFailedAttrPath=$(jq -r 'join(".")' <<< "$failedAttrPath")

  if jq -e --argjson path "$failedAttrPath" 'getpath($path)' "$errorSet" >/dev/null; then
    echo "Evaluation of $prettyFailedAttrPath failed again, even though this failure should have been filtered out from the previous evaluation" >&2
    echo "This is likely a bug in genProjectsJson.nix:" >&2
    cat "$err" >&2
    exit 1
  fi

  # Modifies the errorSet to have an error entry for the failed attribute path,
  # therefore filtering it out for the next evaluation
  cp "$errorSet" "$prevErrorSet"
  jq -c \
    --arg error "$(cat "$err")" \
    --argjson path "$failedAttrPath" \
    '. * setpath($path; $error)' \
    "$prevErrorSet" > "$errorSet"

  echo "Evaluation of $prettyFailedAttrPath failed:" >&2
  cat "$err" >&2
  echo "" >&2

  # Swap err and prevErr files
  tmp="$prevErr"
  prevErr="$err"
  err="$tmp"

done

jq -n \
  --argjson projects "$projects" \
  --slurpfile failures "$errorSet" \
  '{ failures : $failures[0], projects : $projects }'
